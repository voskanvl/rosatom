import { z, ZodError } from "zod"

//--- CHECK ABOUT PAGE
const isExcursionPage = !!document.querySelector("section.excursion")
if (isExcursionPage) {
    const mainHeader = document.querySelector(".main-header")
    mainHeader && mainHeader.classList.add("main-header--white")
}

//--- FORM ---
const TIMEOUT = 3000
let didSend = false
const schema = z.object({
    name: z.string().min(2, { message: "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ –¥–≤—É—Ö –±—É–∫–≤" }),
    phone: z.string().min(11, { message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏—Ñ—Ä –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 10" }),
    email: z.string().email({ message: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω—ã–π email" }),
    agree: z.literal(true, {
        errorMap: () => ({
            message:
                "–ë–µ–∑ –í–∞—à–µ–≥–æ —Å–æ–≥–ª–∞—Å–∏—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –º—ã –Ω–µ —Å–º–æ–∂–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
        }),
    }),
})
const form = document.querySelector<HTMLFormElement>("form")

let formObject =
    form && Object.keys(schema.shape).reduce((acc, e) => ({ ...acc, [e]: form[e].value }), {})

formObject = { ...formObject, agree: document.querySelector<HTMLInputElement>("#agree")?.checked }
console.log("üöÄ ~ formObject:", formObject)

form &&
    form.addEventListener("submit", async (event: Event) => {
        event.preventDefault()
        didSend = true
        const url = form.action

        try {
            schema.parse(formObject)
            const res = await fetch(url, {
                method: "POST",
                body: new FormData(form),
            })

            let outMessage = ""

            if (res.ok) {
                outMessage = "–ó–ê–Ø–í–ö–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê –£–°–ü–ï–®–ù–û"
            } else {
                outMessage = "–û–¢–ü–†–ê–í–ò–¢–¨ –ù–ï –£–î–ê–õ–û–°–¨. –ü–û–ü–†–û–ë–£–ô–¢–ï –ï–©–ï –†–ê–ó –ò–õ–ò –ü–ï–†–ï–ó–ê–ì–†–£–ó–ò–¢–ï –°–¢–†–ê–ù–ò–¶–£"
            }

            const prevFormHTML = form.innerHTML
            form.innerHTML = outMessage
            setTimeout(() => {
                form.innerHTML = prevFormHTML
                form.reset()
            }, TIMEOUT || 3000)
        } catch (error) {
            const fail = error as ZodError
            console.log(fail)
            const errors = fail.errors.map(({ message, path: [name] }) => ({ path: name, message }))
            errors.forEach(({ message, path }) => {
                console.log("üöÄ ~ message, path :", message, path)
                const label = (
                    form[path] as HTMLInputElement
                ).parentElement?.querySelector<HTMLElement>(`label[for="${path}"]`)
                label && (label.innerHTML = message)
            })
        }
    })

//---
